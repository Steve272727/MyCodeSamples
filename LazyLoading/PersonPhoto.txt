*******************************
ORIGINAL
*******************************
package com.example.core.data.entity;

import jakarta.persistence.Basic;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.Lob;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.SequenceGenerator;
import jakarta.persistence.Table;
import jakarta.persistence.Transient;

import java.util.Objects;

@Entity
@Table(name = "t_person_photo")
public class PersonPhoto {
    @Id
    //@GeneratedValue(strategy = GenerationType.IDENTITY)
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "seq_t_person_photo")
    @SequenceGenerator(name = "person_photo_seq", sequenceName = "seq_t_person_photo", allocationSize = 1)    
    @Column(name="id", nullable=false)
    private Long id;

	@Column(name = "file_name")
    private String fileName;

	//TODO: add file title and file summary fields
	
    @Lob
    @Column(name = "photo")
//Turn it off to verify the unit test for lazy loading    
    @Basic(fetch = FetchType.LAZY) // Set the fetch type to LAZY. This requires the hibernate-enhance-maven-plugin
//See: https://vladmihalcea.com/the-best-way-to-lazy-load-entity-attributes-using-jpa-and-hibernate/    
    private byte[] photo;

    @Transient
    private boolean photoLoaded=false;
    
    //doesn't work. just by acessing photo then it accesses the
    public boolean isPhotoLoaded() {
    	return photoLoaded;
	}

    @Transient
    public boolean testIsPhotoLoaded() {
    	if (photo==null) {
    		return false;
    	}
    	else {
    		return true;
    	}
    }

//	public void setPhotoLoaded(boolean photoLoaded) {
//		this.photoLoaded = photoLoaded;
//	}

	//In work system N, the relationship to person case is lazy
	@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name = "person_id")
    private Person person;

    // Constructors, getters, setters, and other methods

    public PersonPhoto() {
        // Default constructor
    }

    // Constructors, getters, setters, and other methods
    public Person getPerson() {
		return person;
	}

	public void setPerson(Person person) {
		this.person = person;
	}   
	
    public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public String getFileName() {
		return fileName;
	}

	public void setFileName(String fileName) {
		this.fileName = fileName;
	}

	public byte[] getPhoto() {
		System.out.println("Getting photo!!!!!!!!!!!!!!!!!!");
		photoLoaded=true;
		return photo;
	}

	public void setPhoto(byte[] photo) {
		System.out.println("Setting photo");
		//?
		//photoLoaded=true;
		this.photo = photo;
	}	

    // Equals and hashCode methods for comparison
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        PersonPhoto that = (PersonPhoto) o;
        return Objects.equals(id, that.id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id);
    }
}

*********************************************************
COMPILED - PLUGIN with enableLazyInitialization only set
*********************************************************

package com.example.core.data.entity;

import jakarta.persistence.Basic;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.Lob;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.SequenceGenerator;
import jakarta.persistence.Table;
import jakarta.persistence.Transient;
import java.util.Objects;
import org.hibernate.bytecode.enhance.spi.EnhancementInfo;
import org.hibernate.engine.spi.EntityEntry;
import org.hibernate.engine.spi.ManagedEntity;
import org.hibernate.engine.spi.PersistentAttributeInterceptable;
import org.hibernate.engine.spi.PersistentAttributeInterceptor;

@Entity
@Table(name = "t_person_photo")
@EnhancementInfo(version = "6.4.0.Final")
public class PersonPhoto implements ManagedEntity, PersistentAttributeInterceptable {
  @Id
  @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "seq_t_person_photo")
  @SequenceGenerator(name = "person_photo_seq", sequenceName = "seq_t_person_photo", allocationSize = 1)
  @Column(name = "id", nullable = false)
  Long id;
  
  @Column(name = "file_name")
  String fileName;
  
  @Lob
  @Column(name = "photo")
  @Basic(fetch = FetchType.LAZY)
  byte[] photo;
  
  @Transient
  private boolean photoLoaded = false;
  
  @ManyToOne(fetch = FetchType.LAZY)
  @JoinColumn(name = "person_id")
  Person person;
  
  @Transient
  private transient EntityEntry $$_hibernate_entityEntryHolder; ****** MY OWN IMP IS SAME
  
  @Transient
  private transient ManagedEntity $$_hibernate_previousManagedEntity; ****** MY OWN IMP IS SAME
  
  @Transient
  private transient ManagedEntity $$_hibernate_nextManagedEntity; ****** MY OWN IMP IS SAME
  
****************** NOTE: this doesn't use the setUseTracker and useTracker methods ?  
  
  @Transient
  private transient PersistentAttributeInterceptor $$_hibernate_attributeInterceptor; ****** MY OWN IMP IS SAME
  
  public boolean isPhotoLoaded() {
    return this.photoLoaded;
  }
  
  @Transient
  public boolean testIsPhotoLoaded() {
    if ($$_hibernate_read_photo() == null)
      return false; 
    return true;
  }
  
  public Person getPerson() {
    return $$_hibernate_read_person();
  }
  
  public void setPerson(Person person) {
    $$_hibernate_write_person(person);
  }
  
  public Long getId() {
    return $$_hibernate_read_id();
  }
  
  public void setId(Long id) {
    $$_hibernate_write_id(id);
  }
  
  public String getFileName() {
    return $$_hibernate_read_fileName();
  }
  
  public void setFileName(String fileName) {
    $$_hibernate_write_fileName(fileName);
  }
  
  public byte[] getPhoto() {
    System.out.println("Getting photo!!!!!!!!!!!!!!!!!!");
    this.photoLoaded = true;
    return $$_hibernate_read_photo();
  }
  
  public void setPhoto(byte[] photo) {
    System.out.println("Setting photo");
    $$_hibernate_write_photo(photo);
  }
  
  public boolean equals(Object o) {
    if (this == o)
      return true; 
    if (o == null || getClass() != o.getClass())
      return false; 
    PersonPhoto that = (PersonPhoto)o;
    return Objects.equals($$_hibernate_read_id(), that.$$_hibernate_read_id());
  }
  
  public int hashCode() {
    return Objects.hash(new Object[] { $$_hibernate_read_id() });
  }
  
  public Object $$_hibernate_getEntityInstance() {
    return this;
  }
  
  public EntityEntry $$_hibernate_getEntityEntry() {    ****** MY OWN IMP IS SAME
    return this.$$_hibernate_entityEntryHolder;
  }
  
  public void $$_hibernate_setEntityEntry(EntityEntry paramEntityEntry) { ****** MY OWN IMP IS SAME
    this.$$_hibernate_entityEntryHolder = paramEntityEntry;
  }
  
  public ManagedEntity $$_hibernate_getPreviousManagedEntity() {  ****** MY OWN IMP IS SAME
    return this.$$_hibernate_previousManagedEntity;
  }
  
  public void $$_hibernate_setPreviousManagedEntity(ManagedEntity paramManagedEntity) { ****** MY OWN IMP IS SAME
    this.$$_hibernate_previousManagedEntity = paramManagedEntity;
  }
  
  public ManagedEntity $$_hibernate_getNextManagedEntity() { ****** MY OWN IMP IS SAME
    return this.$$_hibernate_nextManagedEntity;
  }
  
  public void $$_hibernate_setNextManagedEntity(ManagedEntity paramManagedEntity) { ****** MY OWN IMP IS SAME
    this.$$_hibernate_nextManagedEntity = paramManagedEntity;
  }
  
  public PersistentAttributeInterceptor $$_hibernate_getInterceptor() {
    return this.$$_hibernate_attributeInterceptor;
  }
  
  public void $$_hibernate_setInterceptor(PersistentAttributeInterceptor paramPersistentAttributeInterceptor) {
    this.$$_hibernate_attributeInterceptor = paramPersistentAttributeInterceptor;
  }
  
  public Long $$_hibernate_read_id() {
    if ($$_hibernate_getInterceptor() != null)
      this.id = (Long)$$_hibernate_getInterceptor().readObject(this, "id", this.id); 
    return this.id;
  }
  
  public void $$_hibernate_write_id(Long paramLong) {
    if ($$_hibernate_getInterceptor() != null) {
      this.id = (Long)$$_hibernate_getInterceptor().writeObject(this, "id", this.id, paramLong);
      return;
    } 
    this.id = paramLong;
  }
  
  public String $$_hibernate_read_fileName() {
    if ($$_hibernate_getInterceptor() != null)
      this.fileName = (String)$$_hibernate_getInterceptor().readObject(this, "fileName", this.fileName); 
    return this.fileName;
  }
  
  public void $$_hibernate_write_fileName(String paramString) {
    if ($$_hibernate_getInterceptor() != null) {
      this.fileName = (String)$$_hibernate_getInterceptor().writeObject(this, "fileName", this.fileName, paramString);
      return;
    } 
    this.fileName = paramString;
  }
  
  public byte[] $$_hibernate_read_photo() { ***** OUR IMP A LITTLE DIFFERENT
    if ($$_hibernate_getInterceptor() != null)
      this.photo = (byte[])$$_hibernate_getInterceptor().readObject(this, "photo", this.photo); 
    return this.photo;
  }
  
  public void $$_hibernate_write_photo(byte[] paramArrayOfbyte) { ***** OUR IMP A LITTLE DIFFERENT
    if ($$_hibernate_getInterceptor() != null) {
      this.photo = (byte[])$$_hibernate_getInterceptor().writeObject(this, "photo", this.photo, paramArrayOfbyte);
      return;
    } 
    this.photo = paramArrayOfbyte;
  }
  
  public Person $$_hibernate_read_person() {
    if ($$_hibernate_getInterceptor() != null)
      this.person = (Person)$$_hibernate_getInterceptor().readObject(this, "person", this.person); 
    return this.person;
  }
  
  public void $$_hibernate_write_person(Person paramPerson) {
    if ($$_hibernate_getInterceptor() != null) {
      this.person = (Person)$$_hibernate_getInterceptor().writeObject(this, "person", this.person, paramPerson);
      return;
    } 
    this.person = paramPerson;
  }
}


*********************************************************
COMPILED - PLUGIN disabled
*********************************************************

Can see here that all the extra code added is simply removed and it's back to normal!!!

package com.example.core.data.entity;

import jakarta.persistence.Basic;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.Lob;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.SequenceGenerator;
import jakarta.persistence.Table;
import jakarta.persistence.Transient;
import java.util.Objects;

@Entity
@Table(name = "t_person_photo")
public class PersonPhoto {
  @Id
  @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "seq_t_person_photo")
  @SequenceGenerator(name = "person_photo_seq", sequenceName = "seq_t_person_photo", allocationSize = 1)
  @Column(name = "id", nullable = false)
  private Long id;
  
  @Column(name = "file_name")
  private String fileName;
  
  @Lob
  @Column(name = "photo")
  @Basic(fetch = FetchType.LAZY)
  private byte[] photo;
  
  @Transient
  private boolean photoLoaded = false;
  
  @ManyToOne(fetch = FetchType.LAZY)
  @JoinColumn(name = "person_id")
  private Person person;
  
  public boolean isPhotoLoaded() {
    return this.photoLoaded;
  }
  
  @Transient
  public boolean testIsPhotoLoaded() {
    if (this.photo == null)
      return false; 
    return true;
  }
  
  public Person getPerson() {
    return this.person;
  }
  
  public void setPerson(Person person) {
    this.person = person;
  }
  
  public Long getId() {
    return this.id;
  }
  
  public void setId(Long id) {
    this.id = id;
  }
  
  public String getFileName() {
    return this.fileName;
  }
  
  public void setFileName(String fileName) {
    this.fileName = fileName;
  }
  
  public byte[] getPhoto() {
    System.out.println("Getting photo!!!!!!!!!!!!!!!!!!");
    this.photoLoaded = true;
    return this.photo;
  }
  
  public void setPhoto(byte[] photo) {
    System.out.println("Setting photo");
    this.photo = photo;
  }
  
  public boolean equals(Object o) {
    if (this == o)
      return true; 
    if (o == null || getClass() != o.getClass())
      return false; 
    PersonPhoto that = (PersonPhoto)o;
    return Objects.equals(this.id, that.id);
  }
  
  public int hashCode() {
    return Objects.hash(new Object[] { this.id });
  }
}



